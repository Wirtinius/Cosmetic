{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nfunction useUser() {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    let authToken = window.localStorage.getItem(\"accessToken\");\n    if (!authToken) {\n      // No token found, user is not logged in\n      setUser(null);\n      return;\n    }\n    try {\n      let decodedToken = jwtDecode(authToken);\n      const currentTime = Date.now() / 1000; // JWT exp is in seconds\n\n      if (decodedToken.exp < currentTime) {\n        // Token has expired\n        console.log(\"Token expired.\");\n        setUser(null);\n        // Optionally, clear the token from local storage or handle token refresh\n        window.localStorage.removeItem(\"accessToken\");\n      } else {\n        // Token is valid\n        setUser(decodedToken);\n      }\n    } catch (error) {\n      console.error(\"Error decoding token:\", error);\n      setUser(null);\n    }\n  }, []); // This will only run once when the component mounts\n\n  return user;\n}\n_s(useUser, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\nexport default useUser;","map":{"version":3,"names":["useState","useEffect","jwtDecode","useUser","_s","user","setUser","authToken","window","localStorage","getItem","decodedToken","currentTime","Date","now","exp","console","log","removeItem","error"],"sources":["/Users/alen/Desktop/freelance/cosmetic/Cosmetic-example/client/src/pages/User/handler/userHandler.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {jwtDecode} from 'jwt-decode';\n\nfunction useUser() {\n    const [user, setUser] = useState(null);\n\n    useEffect(() => {\n        let authToken = window.localStorage.getItem(\"accessToken\");\n        if (!authToken) {\n            // No token found, user is not logged in\n            setUser(null);\n            return;\n        }\n\n        try {\n            let decodedToken = jwtDecode(authToken);\n            const currentTime = Date.now() / 1000; // JWT exp is in seconds\n\n            if (decodedToken.exp < currentTime) {\n                // Token has expired\n                console.log(\"Token expired.\");\n                setUser(null);\n                // Optionally, clear the token from local storage or handle token refresh\n                window.localStorage.removeItem(\"accessToken\");\n            } else {\n                // Token is valid\n                setUser(decodedToken);\n            }\n        } catch (error) {\n            console.error(\"Error decoding token:\", error);\n            setUser(null);\n        }\n    }, []); // This will only run once when the component mounts\n\n    return user;\n}\n\nexport default useUser;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAAQC,SAAS,QAAO,YAAY;AAEpC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ,IAAIM,SAAS,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC1D,IAAI,CAACH,SAAS,EAAE;MACZ;MACAD,OAAO,CAAC,IAAI,CAAC;MACb;IACJ;IAEA,IAAI;MACA,IAAIK,YAAY,GAAGT,SAAS,CAACK,SAAS,CAAC;MACvC,MAAMK,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;;MAEvC,IAAIH,YAAY,CAACI,GAAG,GAAGH,WAAW,EAAE;QAChC;QACAI,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;QAC7BX,OAAO,CAAC,IAAI,CAAC;QACb;QACAE,MAAM,CAACC,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;MACjD,CAAC,MAAM;QACH;QACAZ,OAAO,CAACK,YAAY,CAAC;MACzB;IACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cb,OAAO,CAAC,IAAI,CAAC;IACjB;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAOD,IAAI;AACf;AAACD,EAAA,CAhCQD,OAAO;AAkChB,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}